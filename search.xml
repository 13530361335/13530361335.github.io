<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>转载博客</title>
      <link href="/2018/12/31/wen-dang-qing-dan/"/>
      <url>/2018/12/31/wen-dang-qing-dan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://zhuanlan.zhihu.com/p/44858698" title="黑苹果安装教程" target="_blank" rel="noopener">1.macOS 10.14 Mojave黑苹果安装教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDK源码阅读顺序</title>
      <link href="/2018/12/31/jdk-yuan-ma-yue-du-shun-xu/"/>
      <url>/2018/12/31/jdk-yuan-ma-yue-du-shun-xu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>很多java开发的小伙伴都会阅读jdk源码，然而确不知道应该从哪读起。<br>以下为小编整理的通常所需阅读的源码范围,标题为包名，后面序号为优先级1-4，优先级递减。</p><p><strong>1、java.lang</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> Object 12<span class="token punctuation">)</span> String 13<span class="token punctuation">)</span> AbstractStringBuilder 14<span class="token punctuation">)</span> StringBuffer 15<span class="token punctuation">)</span> StringBuilder 16<span class="token punctuation">)</span> Boolean 27<span class="token punctuation">)</span> Byte 28<span class="token punctuation">)</span> Double 29<span class="token punctuation">)</span> Float 210<span class="token punctuation">)</span> Integer 211<span class="token punctuation">)</span> Long 212<span class="token punctuation">)</span> Short 213<span class="token punctuation">)</span> Thread 214<span class="token punctuation">)</span> ThreadLocal 215<span class="token punctuation">)</span> Enum 316<span class="token punctuation">)</span> Throwable 317<span class="token punctuation">)</span> Error 318<span class="token punctuation">)</span> Exception 319<span class="token punctuation">)</span> Class 420<span class="token punctuation">)</span> ClassLoader 421<span class="token punctuation">)</span> Compiler 422<span class="token punctuation">)</span> System 423<span class="token punctuation">)</span> Package 424<span class="token punctuation">)</span> Void 4</code></pre><p><strong>2、java.util</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> AbstractList 12<span class="token punctuation">)</span> AbstractMap 13<span class="token punctuation">)</span> AbstractSet 14<span class="token punctuation">)</span> ArrayList 15<span class="token punctuation">)</span> LinkedList 16<span class="token punctuation">)</span> HashMap 17<span class="token punctuation">)</span> Hashtable 18<span class="token punctuation">)</span> HashSet 19<span class="token punctuation">)</span> LinkedHashMap 110<span class="token punctuation">)</span> LinkedHashSet 111<span class="token punctuation">)</span> TreeMap 112<span class="token punctuation">)</span> TreeSet 113<span class="token punctuation">)</span> Vector 214<span class="token punctuation">)</span> Queue 215<span class="token punctuation">)</span> Stack 216<span class="token punctuation">)</span> SortedMap 217<span class="token punctuation">)</span> SortedSet 218<span class="token punctuation">)</span> Collections 319<span class="token punctuation">)</span> Arrays 320<span class="token punctuation">)</span> Comparator 321<span class="token punctuation">)</span> Iterator 322<span class="token punctuation">)</span> Base64 423<span class="token punctuation">)</span> Date 424<span class="token punctuation">)</span> EventListener 425<span class="token punctuation">)</span> Random 426<span class="token punctuation">)</span> SubList 427<span class="token punctuation">)</span> Timer 428<span class="token punctuation">)</span> UUID 429<span class="token punctuation">)</span> WeakHashMap 4</code></pre><p><strong>3、java.util.concurrent</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> ConcurrentHashMap 12<span class="token punctuation">)</span> Executor 23<span class="token punctuation">)</span> AbstractExecutorService 24<span class="token punctuation">)</span> ExecutorService 25<span class="token punctuation">)</span> ThreadPoolExecutor 26<span class="token punctuation">)</span> BlockingQueue 27）AbstractQueuedSynchronizer 28）CountDownLatch 29<span class="token punctuation">)</span> FutureTask 210）Semaphore 211）CyclicBarrier 213）CopyOnWriteArrayList 314）SynchronousQueue 315）BlockingDeque 316<span class="token punctuation">)</span> Callable 4</code></pre><p><strong>4、java.util.concurrent.atomic</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> AtomicBoolean 22<span class="token punctuation">)</span> AtomicInteger 23<span class="token punctuation">)</span> AtomicLong 24<span class="token punctuation">)</span> AtomicReference 3</code></pre><p><strong>5、java.lang.reflect</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> Field 22<span class="token punctuation">)</span> Method 2</code></pre><p><strong>6、java.lang.annotation</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> Annotation 32<span class="token punctuation">)</span> Target 33<span class="token punctuation">)</span> Inherited 34<span class="token punctuation">)</span> Retention 35<span class="token punctuation">)</span> Documented 46<span class="token punctuation">)</span> ElementType 47<span class="token punctuation">)</span> Native 48<span class="token punctuation">)</span> Repeatable 4</code></pre><p><strong>7、java.util.concurrent.locks</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> Lock 22<span class="token punctuation">)</span> Condition 23<span class="token punctuation">)</span> ReentrantLock 24<span class="token punctuation">)</span> ReentrantReadWriteLock 2</code></pre><p><strong>8、java.io</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> File 32<span class="token punctuation">)</span> InputStream   33<span class="token punctuation">)</span> OutputStream  34<span class="token punctuation">)</span> Reader  45<span class="token punctuation">)</span> Writer  4</code></pre><p><strong>9、java.nio</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> Buffer 32<span class="token punctuation">)</span> ByteBuffer 43<span class="token punctuation">)</span> CharBuffer 44<span class="token punctuation">)</span> DoubleBuffer 45<span class="token punctuation">)</span> FloatBuffer 46<span class="token punctuation">)</span> IntBuffer 47<span class="token punctuation">)</span> LongBuffer 48<span class="token punctuation">)</span> ShortBuffer 4</code></pre><p><strong>10、java.sql</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> Connection 32<span class="token punctuation">)</span> Driver 33<span class="token punctuation">)</span> DriverManager 34<span class="token punctuation">)</span> JDBCType 35<span class="token punctuation">)</span> ResultSet 46<span class="token punctuation">)</span> Statement 4</code></pre><p><strong>11、java.net</strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span> Socket 32<span class="token punctuation">)</span> ServerSocket 33<span class="token punctuation">)</span> URI 44<span class="token punctuation">)</span> URL 45<span class="token punctuation">)</span> URLEncoder 4</code></pre><p>###阅读笔记简版<br>1、Object<br>1) wait(), notify(), notifyAll(), wait(timeout)<br>2) hashCode(), equals()<br>3) clone()</p><p>2、String<br>1) char[] value<br>2) int hash<br>3) equals(), startWith(), endWith(), replace</p><p>3、AbstractStringBuilder<br>1) char[] value<br>2) int count<br>3) 扩容：翻倍，不够取所需最小</p><p>4、StringBuffer<br>1) 继承AbstractStringBuilder<br>2) synchronized方法保证线程安全<br>3) char[] toStringCache</p><p>5、StringBuilder 继承AbstractStringBuilder</p><p>6、ArrayList<br>1) Object[] elementData<br>2) int size<br>3) 默认大小10<br>4) 扩容：翻倍，不够取所需最小</p><p>7、LinkedList<br>1) Node {E item, Node prev, Node next}<br>2) int size<br>3) Node first<br>4) Node last<br>5) linkFirst(), linkLast(), linkBefore(), unLinkFirst(), unLinkLast(), unLink(), indexOf()</p><p>8、HashMap<br>1) Node{int hash, K key, V value, Node next}<br>2) 默认容量16，负载因子0.75f<br>3) int size, modCount, threshold, float loadFactor<br>4) Node[] table<br>5) Set entrySet<br>6) put():根据key算hash，根据容量和hash算index，table[index]没有直接添加到数组中，table[index]有，若index位置同一个key则更新，否则遍历next是否有，有则更新，无则新增，最后根据thread与size判断是否扩容。注：扩容时容量翻倍，重新算hash复制到新数组<br>7）get()类似<br>注：先比较hash，若相等在比较equals</p><p>9、Hashtable<br>1) 结构实现与HashMap基本一致<br>2)通过synchronized方法保证线程安全</p><p>10、HashSet：委托给HashMap，其Value是同一个默认对象</p><p>11、LinkedHashMap继承HashMap<br>1) Entry{HashMap.Node, Entry before, after}<br>2) Entry head, tail<br>3) 重写newNode()添加节点时，除像HashMap中添加外，保存before、after信息</p><p>12、LinkedHashSet继承HashSet：不知道如何实现的顺序？</p><p>13、AbstractMap维护EntrySet，AbstractSet维护Iterator，AbstractList维护Iterator</p><p>14、ConcurrentHashMap<br>1) JDK1.7及以前：<br>a、Segment[] ,HashEntry[] , HashEntry{hash, k, v, next}<br>b、根据key算hash，根据hash和Segment的大小算位置，每个segment拥有一个自己的HashEntry[]<br>c、get()：不加锁，volatile类型<br>d、put(): 对相应segment加锁<br>e、size()：各HashEntry[] 之和，先不加锁算两遍，若一致则返回，若不一致则加锁重新计算<br>2）JDK1.8<br>a、Node{hash, key, value, next}<br>b、Node[] table<br>c、大多数操作类似于HashMap，不同CAS方式设置，根据key算hash，在根据hash和容量算index，对table[index]加锁，从而达到更大的并发量<br>d、get(): 同HashMap<br>e、put(): 对table[index]加锁</p><p>15、TreeMap<br>1）红黑树，即自平衡二叉查找树，时间复杂度O(logn)<br>2）Entry{K k, V v, Entry parent, left, right, boolean color}<br>3）Entry root，int size， int modeCount</p><h2 id="16、TreeSet：委托TreeMap实现"><a href="#16、TreeSet：委托TreeMap实现" class="headerlink" title="16、TreeSet：委托TreeMap实现"></a>16、TreeSet：委托TreeMap实现</h2><p>作者：猴子哥哥1024<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/qq_21033663/article/details/79571506" target="_blank" rel="noopener">https://blog.csdn.net/qq_21033663/article/details/79571506</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>music</title>
      <link href="/2018/12/28/music/"/>
      <url>/2018/12/28/music/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-iqDYdSlJ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":true,"showlrc":3,"mode":"random","music":[{"title":"大千世界","author":"许嵩","url":"/2018/12/28/music/许嵩%20-%20大千世界(bq).mp3","pic":""},{"title":"有何不可","author":"许嵩","url":"/2018/12/28/music/许嵩%20-%20有何不可(bq).mp3","pic":""},{"title":"七号公园","author":"许嵩","url":"/2018/12/28/music/许嵩%20-%20七号公园(bq).mp3","pic":""},{"title":"断桥残雪","author":"许嵩","url":"/2018/12/28/music/许嵩%20-%20断桥残雪(bq).mp3","pic":""},{"title":"素颜","author":"许嵩、何曼婷","url":"/2018/12/28/music/许嵩、何曼婷%20-%20素颜(bq).mp3","pic":""},{"title":"讲真的","author":"曾惜","url":"/2018/12/28/music/曾惜%20-%20讲真的(bq).mp3","pic":""},{"title":"演员","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20演员(bq).mp3","pic":""},{"title":"绅士","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20绅士(bq).mp3","pic":""},{"title":"你还要我怎样","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20你还要我怎样(bq).mp3","pic":""},{"title":"高尚","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20高尚(bq).mp3","pic":""},{"title":"怪咖","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20怪咖(bq).mp3","pic":""},{"title":"哑巴","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20哑巴(bq).mp3","pic":""},{"title":"天后","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20天后%20(Live)(bq).mp3","pic":""},{"title":"丑八怪","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20丑八怪(bq).mp3","pic":""},{"title":"肆无忌惮","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20肆无忌惮(bq).mp3","pic":""},{"title":"动物世界","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20动物世界(bq).mp3","pic":""},{"title":"刚刚好","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20刚刚好(bq).mp3","pic":""},{"title":"我害怕","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20我害怕(bq).mp3","pic":""},{"title":"别","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20别(bq).mp3","pic":""},{"title":"我好像在哪见过你","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20我好像在哪见过你(bq).mp3","pic":""},{"title":"像风一样","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20像风一样(bq).mp3","pic":""},{"title":"天份","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20天份.mp3","pic":""},{"title":"渡","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20渡(bq).mp3","pic":""},{"title":"背过手","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20背过手(bq).mp3","pic":""},{"title":"暧昧","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20暧昧(bq).mp3","pic":""},{"title":"那是你离开了北京的生活","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20那是你离开了北京的生活(bq).mp3","pic":""},{"title":"方圆几里","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20方圆几里(bq).mp3","pic":""},{"title":"其实","author":"薛之谦","url":"/2018/12/28/music/薛之谦%20-%20其实(bq).mp3","pic":""}]};  options.element = document.getElementById("aplayer-iqDYdSlJ");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
      
      
      <categories>
          
          <category> Music </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hexo撰写文章</title>
      <link href="/2018/12/04/hexo-zhuan-xie-wen-zhang/"/>
      <url>/2018/12/04/hexo-zhuan-xie-wen-zhang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、创建文章"><a href="#一、创建文章" class="headerlink" title="一、创建文章"></a>一、创建文章</h1><p>在站点文件夹中打开git bash，输入如下命令创建文章，其中title为文章的标题</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"title"</span></code></pre><p>此时就会在source/_post文件夹中创建了一个文件，命名为：title.md，而这个文件就是将要发布到网站上的原始文件，记录文章内容，以下我们将要在这个文件中写下我们的第一篇博客</p><h1 id="二、编写文章（基于Markdown）"><a href="#二、编写文章（基于Markdown）" class="headerlink" title="二、编写文章（基于Markdown）"></a>二、编写文章（基于Markdown）</h1><h2 id="1-Markdown简介"><a href="#1-Markdown简介" class="headerlink" title="1. Markdown简介"></a>1. Markdown简介</h2><p>但是在我们正式写下我们文章的第一个文字前，我们需要了解一下什么是Markdown：</p><pre class=" language-bash"><code class="language-bash">Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式</code></pre><p>基于markdown的简洁性，它已经成为了目前世界上最流行的用于书写博客的语言</p><h2 id="2-Markdown语法"><a href="#2-Markdown语法" class="headerlink" title="2. Markdown语法"></a>2. Markdown语法</h2><p>在了解markdown语法之前，博主十分强烈的推荐大家一款简洁易用的markdown编辑器——Typora，按照官方的说法就是<strong>简单而强大</strong>，它不仅支持原生的markdown语法，也支持对应的快捷键，更重要的是它还可以实时预览 ，简直不要太优秀了。这里附上Typora的下载地址：<a href="https://www.typora.io/，有兴趣的小伙伴可以下载来试试哦" target="_blank" rel="noopener">https://www.typora.io/，有兴趣的小伙伴可以下载来试试哦</a></p><p>好，下面开始进入正题，介绍一些常用的markdown语法</p><p>###（1）标题</p><p>Markdown语法：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 一级标题</span><span class="token comment" spellcheck="true">## 二级标题</span><span class="token comment" spellcheck="true">### 三级标题</span><span class="token comment" spellcheck="true">#### 四级标题</span><span class="token comment" spellcheck="true">##### 五级标题</span><span class="token comment" spellcheck="true">###### 六级标题</span></code></pre><p>Typora快捷键：<br>Ctrl+1：一级标题<br>Ctrl+2：二级标题<br>Ctrl+3：三级标题<br>Ctrl+4：四级标题<br>Ctrl+5：五级标题<br>Ctrl+6 ：六级标题<br>Ctrl+0：段落</p><p>###（2）粗体、斜体、删除线和下划线</p><p>Markdown语法：</p><pre class=" language-bash"><code class="language-bash">*斜体***粗体*****加粗斜体***~~删除线~~</code></pre><p>Typora快捷键：<br>Ctrl+I：斜体<br>Ctrl+B：粗体<br>Ctrl+U：下划线<br>Alt+Shift+5：删除线</p><p>###（3）超链接</p><p>Markdown语法：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>链接文字<span class="token punctuation">]</span><span class="token punctuation">(</span>链接地址 <span class="token string">"链接描述"</span><span class="token punctuation">)</span>例如：<span class="token punctuation">[</span>我的博客<span class="token punctuation">]</span><span class="token punctuation">(</span>https://forwhfang.github.io/ <span class="token string">"我的博客"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>链接地址<span class="token operator">></span>例如：<span class="token operator">&lt;</span>https://forwhfang.github.io<span class="token operator">></span></code></pre><p>Typora快捷键：Ctrl+K</p><p>###（4）引用</p><p>Markdown语法：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">></span> 文字引用</code></pre><p>Typora快捷键：Ctrl+Shift+Q</p><p>###（5）代码</p><p>Markdown语法：（为了方便起见，这里将使用字符a代替反引号`）</p><pre class=" language-bash"><code class="language-bash">a单行代码aaaa多行代码多行代码aaa</code></pre><p>Typora快捷键：Ctrl+Shift+`</p><p>###（6）分割线</p><p>Markdown语法：</p><pre class=" language-bash"><code class="language-bash">---***</code></pre><p>以上两种方法均可以表示为分割线</p><p>###（7）列表</p><p>Markdown语法：</p><pre class=" language-bash"><code class="language-bash">* 列表项- 列表项+ 列表项</code></pre><p>以上三种方法均可以表示为列表</p><p>###（8）表格</p><p>Markdown语法：</p><pre class=" language-bash"><code class="language-bash">表头1<span class="token operator">|</span>表头2-<span class="token operator">|</span>-<span class="token operator">|</span>-内容11<span class="token operator">|</span>内容12内容21<span class="token operator">|</span>内容22</code></pre><p>Typora快捷键：Ctrl+T （这里就充分体现了Typora快捷键的方便性了）</p><p>###（9）图片</p><p>Markdown语法：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>图片文字<span class="token punctuation">]</span> <span class="token punctuation">(</span>图片地址 <span class="token string">"图片描述"</span><span class="token punctuation">)</span>例如：<span class="token operator">!</span><span class="token punctuation">[</span>示例图片<span class="token punctuation">]</span> <span class="token punctuation">(</span>https://www.example.com/example.PNG <span class="token string">"示例图片"</span><span class="token punctuation">)</span></code></pre><p>Typora快捷键：Ctrl+Shift+I</p><p><strong>说明</strong>：在Hexo中插入图片时，请按照以下步骤进行设置</p><p>（1）将站点配置文件中的 post_asset_folder 选项设置成 true</p><p>（2）在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save 安装插件</p><p>（3）此时使用 hexo new title 创建文章时，将同时在source/_post文件夹中生成一个与title同名的文件夹，我们只需将待添加的图片放进此文件夹中，然后在文章中通过Markdown语法进行引用即可，例如，在资源文件夹（就是那个与title同名的文件夹）中添加了图片example.PNG，则可以在对应的文章中使用语句 <img src="/2018/12/04/hexo-zhuan-xie-wen-zhang/example.PNG" alt="示例图片" title="示例图片"> 添加图片</p><h2 id="3-其他操作"><a href="#3-其他操作" class="headerlink" title="3. 其他操作"></a>3. 其他操作</h2><p>###（1）模板设置</p><p>当我们使用命令 hexo new “title” 去创建我们的文章时，Hexo会根据/scaffolds/post.md文件对新建文件进行初始化，换言之，/scaffolds/post.md文件就是创建新文章的模板，所以我们可以修改它来适应自己的写作习惯，一个简单的示例如下：</p><pre class=" language-bash"><code class="language-bash">title: <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>date: <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">date</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>tags: categories: </code></pre><p>###（2）头部设置</p><p>在博客文章的开头会有对文章的说明文字，叫做文章头部，文章的头部除了可以设置文章标题、书写日期等基础信息外，还可以对文章添加标签、分类等，一个简单的示例如下</p><pre class=" language-bash"><code class="language-bash">title: Titledate: YYYY-MM-DD HH:MM:SStags: <span class="token punctuation">[</span>tag1, tag2, <span class="token punctuation">..</span>.<span class="token punctuation">]</span>categories: category</code></pre><p>注意，属性和属性值之间必须有一个空格，否则会解析错误</p><p>###（3）首页显示</p><p>在Hexo框架博客的首页会显示文章的内容（默认显示文章的全部内容），如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简，只需在文章中使用 <a id="more"></a> 标志，表示只会显示标志前面的内容</p><h1 id="三、部署发布"><a href="#三、部署发布" class="headerlink" title="三、部署发布"></a>三、部署发布</h1><p>在站点文件夹中打开 git bash，输入如下命令部署和发布文章</p><pre class=" language-bash"><code class="language-bash">$ hexo g -d</code></pre><p><strong>建议</strong>：在使用命令 hexo g 部署之后，可以先使用 hexo s 运行本地站点，在浏览器输入地址<a href="http://lacolhost:4000/查看运行结果，检查没有错误后再使用命令" target="_blank" rel="noopener">http://lacolhost:4000/查看运行结果，检查没有错误后再使用命令</a> hexo d 发布</p><hr><p>作者：wsmrzx<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">https://blog.csdn.net/wsmrzx/article/details/81478945</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 撰写文章 </tag>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
